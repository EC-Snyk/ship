{
  "v1": {
    "config": {},
    "releaseName": "istio",
    "helmValuesDefaults": "#\n# Gateways Configuration, refer to the charts/gateways/values.yaml\n# for detailed configuration\n#\ngateways:\n  enabled: true\n\n#\n# sidecar-injector webhook configuration, refer to the\n# charts/sidecarInjectorWebhook/values.yaml for detailed configuration\n#\nsidecarInjectorWebhook:\n  enabled: true\n\n#\n# galley configuration, refer to charts/galley/values.yaml\n# for detailed configuration\n#\ngalley:\n  enabled: true\n\n#\n# mixer configuration\n#\nmixer:\n  enabled: true\n\n#\n# pilot configuration\n#\npilot:\n  enabled: true\n\n#\n# security configuration\n#\nsecurity:\n  enabled: true\n\n#\n# nodeagent configuration\n#\nnodeagent:\n  enabled: false\n\n#\n# ingress configuration\n#\ningress:\n  enabled: false\n\n#\n# addon grafana configuration\n#\ngrafana:\n  enabled: false\n\n#\n# addon prometheus configuration\n#\nprometheus:\n  enabled: true\n\n#\n# addon servicegraph configuration\n#\nservicegraph:\n  enabled: false\n\n#\n# addon jaeger tracing configuration\n#\ntracing:\n  enabled: false\n\n#\n# addon kiali tracing configuration\n#\nkiali:\n  enabled: false\n\n# Common settings used among istio subcharts.\nglobal:\n  # Default hub for Istio images.\n  # Releases are published to docker hub under 'istio' project.\n  # Daily builds from prow are on gcr.io, and nightly builds from circle on docker.io/istionightly\n  hub: gcr.io/istio-release\n\n  # Default tag for Istio images.\n  tag: master-latest-daily\n\n  k8sIngress:\n    enabled: false\n    # Gateway used for legacy k8s Ingress resources. By default it is\n    # using 'istio:ingress', to match 0.8 config. It requires that\n    # ingress.enabled is set to true. You can also set it\n    # to ingressgateway, or any other gateway you define in the 'gateway'\n    # section.\n    gatewayName: ingress\n    # enableHttps will add port 443 on the ingress.\n    # It REQUIRES that the certificates are installed  in the\n    # expected secrets - enabling this option without certificates\n    # will result in LDS rejection and the ingress will not work.\n    enableHttps: false\n\n  proxy:\n    image: proxyv2\n\n    # DNS domain suffix for pilot proxy agent. Default value is \"${POD_NAMESPACE}.svc.cluster.local\".\n    proxyDomain: \"\"\n\n    # DNS domain suffix for pilot proxy discovery. Default value is \"cluster.local\".\n    discoveryDomain: \"\"\n\n    # Resources for the sidecar.\n    resources:\n      requests:\n        cpu: 10m\n      #  memory: 128Mi\n      # limits:\n      #   cpu: 100m\n      #   memory: 128Mi\n\n    # Controls number of Proxy worker threads.\n    # If set to 0 (default), then start worker thread for each CPU thread/core.\n    concurrency: 0\n\n    # Configures the access log for each sidecar. Setting it to an empty string will\n    # disable access log for sidecar.\n    accessLogFile: \"/dev/stdout\"\n\n    #If set to true, istio-proxy container will have privileged securityContext\n    privileged: false\n\n    # If set, newly injected sidecars will have core dumps enabled.\n    enableCoreDump: false\n\n    # Default port for Pilot agent health checks. A value of 0 will disable health checking.\n    statusPort: 15020\n\n    # The initial delay for readiness probes in seconds.\n    readinessInitialDelaySeconds: 1\n\n    # The period between readiness probes.\n    readinessPeriodSeconds: 2\n\n    # The number of successive failed probes before indicating readiness failure.\n    readinessFailureThreshold: 30\n\n    # istio egress capture whitelist\n    # https://istio.io/docs/tasks/traffic-management/egress.html#calling-external-services-directly\n    # example: includeIPRanges: \"172.30.0.0/16,172.20.0.0/16\"\n    # would only capture egress traffic on those two IP Ranges, all other outbound traffic would\n    # be allowed by the sidecar\n    includeIPRanges: \"*\"\n    excludeIPRanges: \"\"\n\n    # istio ingress capture whitelist\n    # examples:\n    #     Redirect no inbound traffic to Envoy:    --includeInboundPorts=\"\"\n    #     Redirect all inbound traffic to Envoy:   --includeInboundPorts=\"*\"\n    #     Redirect only selected ports:            --includeInboundPorts=\"80,8080\"\n    includeInboundPorts: \"*\"\n    excludeInboundPorts: \"\"\n\n    # This controls the 'policy' in the sidecar injector.\n    autoInject: enabled\n\n    # Sets the destination Statsd in envoy (the value of the \"--statsdUdpAddress\" proxy argument\n    # would be \u003chost\u003e:\u003cport\u003e).\n    # Disabled by default.\n    # The istio-statsd-prom-bridge is deprecated and should not be used moving forward.\n    envoyStatsd:\n      # If enabled is set to true, host and port must also be provided. Istio no longer provides a statsd collector.\n      enabled: false\n      host: # example: statsd-svc\n      port: # example: 9125\n\n    # This controls the stats collection for proxies. To disable stats\n    # collection, set the prometheusPort to 0.\n    stats:\n      prometheusPort: 15090\n\n    # Specify which tracer to use. One of: lightstep, zipkin\n    tracer: \"zipkin\"\n\n  proxy_init:\n    # Base name for the proxy_init container, used to configure iptables.\n    image: proxy_init\n\n  # imagePullPolicy is applied to istio control plane components.\n  # local tests require IfNotPresent, to avoid uploading to dockerhub.\n  # TODO: Switch to Always as default, and override in the local tests.\n  imagePullPolicy: IfNotPresent\n\n  # controlPlaneMtls enabled. Will result in delays starting the pods while secrets are\n  # propagated, not recommended for tests.\n  controlPlaneSecurityEnabled: false\n\n  # SDS enabled. IF set to true, mTLS certificates for the sidecars will be\n  # distributed through the SecretDiscoveryService instead of using K8S secrets to mount the certificates.\n  sdsEnabled: false\n\n  # disablePolicyChecks disables mixer policy checks.\n  # Will set the value with same name in istio config map - pilot needs to be restarted to take effect.\n  disablePolicyChecks: false\n\n  # EnableTracing sets the value with same name in istio config map, requires pilot restart to take effect.\n  enableTracing: true\n\n  # Configuration for each of the supported tracers\n  tracer:\n    # Configuration for envoy to send trace data to LightStep.\n    # Disabled by default.\n    # address: the \u003chost\u003e:\u003cport\u003e of the satellite pool\n    # accessToken: required for sending data to the pool\n    # secure: specifies whether data should be sent with TLS\n    # cacertPath: the path to the file containing the cacert to use when verifying TLS. If secure is true, this is\n    #   required. If a value is specified then a secret called \"lightstep.cacert\" must be created in the destination\n    #   namespace with the key matching the base of the provided cacertPath and the value being the cacert itself.\n    #\n    lightstep:\n      address: \"\"                # example: lightstep-satellite:443\n      accessToken: \"\"            # example: abcdefg1234567\n      secure: true               # example: true|false\n      cacertPath: \"\"             # example: /etc/lightstep/cacert.pem\n    zipkin:\n      # Host:Port for reporting trace data in zipkin format. If not specified, will default to\n      # zipkin service (port 9411) in the same namespace as the other istio components.\n      address: \"\"\n\n  # Default mtls policy. If true, mtls between services will be enabled by default.\n  mtls:\n    # Default setting for service-to-service mtls. Can be set explicitly using\n    # destination rules or service annotations.\n    enabled: false\n\n  # ImagePullSecrets for all ServiceAccount, list of secrets in the same namespace\n  # to use for pulling any images in pods that reference this ServiceAccount.\n  # For components that don't use ServiceAccounts (i.e. grafana, servicegraph, tracing)\n  # ImagePullSecrets will be added to the corresponding Deployment(StatefulSet) objects.\n  # Must be set for any clustser configured with private docker registry.\n  imagePullSecrets:\n    # - private-registry-key\n\n  # Specify pod scheduling arch(amd64, ppc64le, s390x) and weight as follows:\n  #   0 - Never scheduled\n  #   1 - Least preferred\n  #   2 - No preference\n  #   3 - Most preferred\n  arch:\n    amd64: 2\n    s390x: 2\n    ppc64le: 2\n\n  # Whether to restrict the applications namespace the controller manages;\n  # If not set, controller watches all namespaces\n  oneNamespace: false\n\n  # Whether to perform server-side validation of configuration.\n  configValidation: true\n\n  # Custom DNS config for the pod to resolve names of services in other\n  # clusters. Use this to add additional search domains, and other settings.\n  # see\n  # https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#dns-config\n  # This does not apply to gateway pods as they typically need a different\n  # set of DNS settings than the normal application pods (e.g., in\n  # multicluster scenarios).\n  #podDNSConfig:\n  #  dnsConfig:\n  #    searches: #some dummy examples\n  #    - foo.bar.baz\n  #    - {{ \"[[ valueOrDefault .DeploymentMeta.Namespace \\\"default\\\" ]]\" }}.bazoo\n\n  # If set to true, the pilot and citadel mtls will be exposed on the\n  # ingress gateway\n  meshExpansion:\n    enabled: false\n    # If set to true, the pilot and citadel mtls and the plain text pilot ports\n    # will be exposed on an internal gateway\n    useILB: false\n\n  multiCluster:\n    # Set to true to connect two kubernetes clusters using a LB gateway as\n    # the only entry point into the cluster (instead of requiring pod to\n    # pod connectivity across two clusters). Note that for this system to\n    # work, service objects from remote clusters have to be replicated to\n    # local cluster (without the pod selectors). In addition, service\n    # entries have to be added for each replicated service object, where\n    # the endpoints in the service entry point to the remote cluster's\n    # mcgatewayIP:15443. All clusters should be using Istio mTLS and must\n    # have a shared root CA for this model to work.\n    connectUsingGateway: false\n\n  # A minimal set of requested resources to applied to all deployments so that\n  # Horizontal Pod Autoscaler will be able to function (if set).\n  # Each component can overwrite these default values by adding its own resources\n  # block in the relevant section below and setting the desired resources values.\n  defaultResources:\n    requests:\n      cpu: 10m\n    #   memory: 128Mi\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n\n  # Kubernetes \u003e=v1.11.0 will create two PriorityClass, including system-cluster-critical and\n  # system-node-critical, it is better to configure this in order to make sure your Istio pods\n  # will not be killed because of low priority class.\n  # Refer to https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass\n  # for more detail.\n  priorityClassName: \"\"\n\n  # Include the crd definition when generating the template.\n  # For 'helm template' and helm install \u003e 2.10 it should be true.\n  # For helm \u003c 2.9, crds must be installed ahead of time with\n  # 'kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml\n  # and this options must be set off.\n  crds: true\n\n  # Use the Mesh Control Protocol (MCP) for configuring Mixer and\n  # Pilot. Requires galley (`--set galley.enabled=true`).\n  useMCP: false\n",
    "upstream": "https://github.com/istio/istio/tree/d3eed9a347ad02f0b79e3f92330878f88953cf64/install/kubernetes/helm/istio",
    "metadata": {
      "applicationType": "helm",
      "sequence": 0,
      "icon": "https://istio.io/favicons/android-192x192.png",
      "name": "istio",
      "releaseNotes": "Add support for configuring LightStep as a tracing backend (#9270)\n\n* Add LightStep configuration\r\n\r\n- Validate LightStep ProxyConfig options\r\n- Clean up formatting of envoy_bootstrap\r\n by using a single indentation scheme\r\n- Update bootstrap golden files and add new ones for tracing\r\n- Update bootstrap tests to check new tracing options\r\n\r\n* Add root cacert.pem into proxy containers\r\n\r\n* Update bootstrap config test\r\n\r\n* Update golden files\r\n\r\n* Move tracer configuration up a level (replacing old one)\r\n\r\n* Remove lightstep as default proxy tracer\r\n\r\n* Set default proxy.tracer to zipkin\r\n\r\n* Make fixes to yaml\r\n\r\n- Make istio-remote configmap set the same default zipkin\r\n  address as istio configmap\r\n- Explicitly check that tracer == \"zipkin\" instead of always\r\n  defaulting to it\r\n\r\n* Replace check for global.remoteZipkinAddress with global.proxy.tracer\r\n\r\n* Enable mounting a custom cacert file\r\n\r\n* Remove default cacert.pem\r\n\r\n* Fix issues after rebase",
      "version": "1.1.0",
      "license": {
        "id": "",
        "assignee": "",
        "createdAt": "0001-01-01T00:00:00Z",
        "expiresAt": "0001-01-01T00:00:00Z",
        "type": ""
      }
    },
    "upstreamContents": {
      "upstreamFiles": [
        {
          "filePath": ".helmignore",
          "fileContents": "Tk9URVMudHh0Cg=="
        },
        {
          "filePath": "Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogaXN0aW8KdmVyc2lvbjogMS4xLjAKYXBwVmVyc2lvbjogMS4xLjAKdGlsbGVyVmVyc2lvbjogIj49Mi43LjItMCIKZGVzY3JpcHRpb246IEhlbG0gY2hhcnQgZm9yIGFsbCBpc3RpbyBjb21wb25lbnRzCmtleXdvcmRzOgogIC0gaXN0aW8KICAtIHNlY3VyaXR5CiAgLSBzaWRlY2FySW5qZWN0b3JXZWJob29rCiAgLSBtaXhlcgogIC0gcGlsb3QKICAtIGdhbGxleQpzb3VyY2VzOgogIC0gaHR0cDovL2dpdGh1Yi5jb20vaXN0aW8vaXN0aW8KZW5naW5lOiBnb3RwbAppY29uOiBodHRwczovL2lzdGlvLmlvL2Zhdmljb25zL2FuZHJvaWQtMTkyeDE5Mi5wbmcK"
        },
        {
          "filePath": "LICENSE",
          "fileContents": ""
        },
        {
          "filePath": "README.md",
          "fileContents": ""
        },
        {
          "filePath": "requirements.yaml",
          "fileContents": "ZGVwZW5kZW5jaWVzOgogIC0gbmFtZTogc2lkZWNhckluamVjdG9yV2ViaG9vawogICAgdmVyc2lvbjogMS4xLjAKICAgIGNvbmRpdGlvbjogc2lkZWNhckluamVjdG9yV2ViaG9vay5lbmFibGVkCiAgICByZXBvc2l0b3J5OiBmaWxlOi8vLi4vc3ViY2hhcnRzL3NpZGVjYXJJbmplY3RvcldlYmhvb2sKICAtIG5hbWU6IHNlY3VyaXR5CiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiBzZWN1cml0eS5lbmFibGVkCiAgICByZXBvc2l0b3J5OiBmaWxlOi8vLi4vc3ViY2hhcnRzL3NlY3VyaXR5CiAgLSBuYW1lOiBpbmdyZXNzCiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiBpbmdyZXNzLmVuYWJsZWQKICAgIHJlcG9zaXRvcnk6IGZpbGU6Ly8uLi9zdWJjaGFydHMvaW5ncmVzcwogIC0gbmFtZTogZ2F0ZXdheXMKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IGdhdGV3YXlzLmVuYWJsZWQKICAgIHJlcG9zaXRvcnk6IGZpbGU6Ly8uLi9zdWJjaGFydHMvZ2F0ZXdheXMKICAtIG5hbWU6IG1peGVyCiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiBtaXhlci5lbmFibGVkCiAgICByZXBvc2l0b3J5OiBmaWxlOi8vLi4vc3ViY2hhcnRzL21peGVyCiAgLSBuYW1lOiBub2RlYWdlbnQKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IG5vZGVhZ2VudC5lbmFibGVkCiAgICByZXBvc2l0b3J5OiBmaWxlOi8vLi4vc3ViY2hhcnRzL25vZGVhZ2VudAogIC0gbmFtZTogcGlsb3QKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IHBpbG90LmVuYWJsZWQKICAgIHJlcG9zaXRvcnk6IGZpbGU6Ly8uLi9zdWJjaGFydHMvcGlsb3QKICAtIG5hbWU6IGdyYWZhbmEKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IGdyYWZhbmEuZW5hYmxlZAogICAgcmVwb3NpdG9yeTogZmlsZTovLy4uL3N1YmNoYXJ0cy9ncmFmYW5hCiAgLSBuYW1lOiBwcm9tZXRoZXVzCiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiBwcm9tZXRoZXVzLmVuYWJsZWQKICAgIHJlcG9zaXRvcnk6IGZpbGU6Ly8uLi9zdWJjaGFydHMvcHJvbWV0aGV1cwogIC0gbmFtZTogc2VydmljZWdyYXBoCiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiBzZXJ2aWNlZ3JhcGguZW5hYmxlZAogICAgcmVwb3NpdG9yeTogZmlsZTovLy4uL3N1YmNoYXJ0cy9zZXJ2aWNlZ3JhcGgKICAtIG5hbWU6IHRyYWNpbmcKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IHRyYWNpbmcuZW5hYmxlZAogICAgcmVwb3NpdG9yeTogZmlsZTovLy4uL3N1YmNoYXJ0cy90cmFjaW5nCiAgLSBuYW1lOiBnYWxsZXkKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IGdhbGxleS5lbmFibGVkCiAgICByZXBvc2l0b3J5OiBmaWxlOi8vLi4vc3ViY2hhcnRzL2dhbGxleQogIC0gbmFtZToga2lhbGkKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IGtpYWxpLmVuYWJsZWQKICAgIHJlcG9zaXRvcnk6IGZpbGU6Ly8uLi9zdWJjaGFydHMva2lhbGkKICAtIG5hbWU6IGNlcnRtYW5hZ2VyCiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiBjZXJ0bWFuYWdlci5lbmFibGVkCiAgICByZXBvc2l0b3J5OiBmaWxlOi8vLi4vc3ViY2hhcnRzL2NlcnRtYW5hZ2Vy"
        },
        {
          "filePath": "templates/NOTES.txt",
          "fileContents": "VGhhbmsgeW91IGZvciBpbnN0YWxsaW5nIHt7IC5DaGFydC5OYW1lIH19LgoKWW91ciByZWxlYXNlIGlzIG5hbWVkIHt7IC5SZWxlYXNlLk5hbWUgfX0uCgpUbyBnZXQgc3RhcnRlZCBydW5uaW5nIGFwcGxpY2F0aW9uIHdpdGggSXN0aW8sIGV4ZWN1dGUgdGhlIGZvbGxvd2luZyBzdGVwczoKCnt7LSBpZiBpbmRleCAuVmFsdWVzICJzaWRlY2FySW5qZWN0b3JXZWJob29rIiAiZW5hYmxlZCIgfX0KMS4gTGFiZWwgbmFtZXNwYWNlIHRoYXQgYXBwbGljYXRpb24gb2JqZWN0IHdpbGwgYmUgZGVwbG95ZWQgdG8gYnkgdGhlIGZvbGxvd2luZyBjb21tYW5kICh0YWtlIGRlZmF1bHQgbmFtZXNwYWNlIGFzIGFuIGV4YW1wbGUpCgokIGt1YmVjdGwgbGFiZWwgbmFtZXNwYWNlIGRlZmF1bHQgaXN0aW8taW5qZWN0aW9uPWVuYWJsZWQKJCBrdWJlY3RsIGdldCBuYW1lc3BhY2UgLUwgaXN0aW8taW5qZWN0aW9uCgoyLiBEZXBsb3kgeW91ciBhcHBsaWNhdGlvbnMKCiQga3ViZWN0bCBhcHBseSAtZiA8eW91ci1hcHBsaWNhdGlvbj4ueWFtbAp7ey0gZWxzZSB9fQoxLiBEb3dubG9hZCB0aGUgbGF0ZXN0IHJlbGVhc2UgcGFja2FnZSB0byBnZXQgc2lkZWNhciBpbmplY3Rpb24gdG9vbAoKJCBjdXJsIC1MIGh0dHBzOi8vZ2l0LmlvL2dldExhdGVzdElzdGlvIHwgc2ggLQokIG12IGlzdGlvLSogaXN0aW8tbGF0ZXN0CiQgZXhwb3J0IFBBVEg9IiRQQVRIOiRQV0QvaXN0aW8tbGF0ZXN0L2JpbiIKCjIuIERlcGxveSB5b3VyIGFwcGxpY2F0aW9uIGJ5IG1hbnVhbGx5IGluamVjdGluZyBlbnZveSBzaWRlY2FyIHdpdGggYGlzdGlvY3RsIGt1YmUtaW5qZWN0YAoKJCBrdWJlY3RsIGFwcGx5IC1mIDwoaXN0aW9jdGwga3ViZS1pbmplY3QgLWYgPHlvdXItYXBwbGljYXRpb24+LnlhbWwpCnt7LSBlbmQgfX0KCkZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHJ1bm5pbmcgSXN0aW8sIHZpc2l0OgpodHRwczovL2lzdGlvLmlvLw=="
        },
        {
          "filePath": "templates/_affinity.tpl",
          "fileContents": "e3svKiBhZmZpbml0eSAtIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vYXNzaWduLXBvZC1ub2RlLyAqL319Cgp7ey0gZGVmaW5lICJub2RlYWZmaW5pdHkiIH19CiAgbm9kZUFmZmluaXR5OgogICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgIHt7LSBpbmNsdWRlICJub2RlQWZmaW5pdHlSZXF1aXJlZER1cmluZ1NjaGVkdWxpbmciIC4gfX0KICAgIHByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uOgogICAge3stIGluY2x1ZGUgIm5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciIC4gfX0Ke3stIGVuZCB9fQoKe3stIGRlZmluZSAibm9kZUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nIiB9fQogICAgICBub2RlU2VsZWN0b3JUZXJtczoKICAgICAgLSBtYXRjaEV4cHJlc3Npb25zOgogICAgICAgIC0ga2V5OiBiZXRhLmt1YmVybmV0ZXMuaW8vYXJjaAogICAgICAgICAgb3BlcmF0b3I6IEluCiAgICAgICAgICB2YWx1ZXM6CiAgICAgICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5nbG9iYWwuYXJjaCB9fQogICAgICAgICAge3stIGlmIGd0ICgkdmFsIHwgaW50KSAwIH19CiAgICAgICAgICAtIHt7ICRrZXkgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCnt7LSBkZWZpbmUgIm5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciIH19CiAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5nbG9iYWwuYXJjaCB9fQogICAge3stIGlmIGd0ICgkdmFsIHwgaW50KSAwIH19CiAgICAtIHdlaWdodDoge3sgJHZhbCB8IGludCB9fQogICAgICBwcmVmZXJlbmNlOgogICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgLSBrZXk6IGJldGEua3ViZXJuZXRlcy5pby9hcmNoCiAgICAgICAgICBvcGVyYXRvcjogSW4KICAgICAgICAgIHZhbHVlczoKICAgICAgICAgIC0ge3sgJGtleSB9fQogICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQ=="
        },
        {
          "filePath": "templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiaXN0aW8ubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgpJZiByZWxlYXNlIG5hbWUgY29udGFpbnMgY2hhcnQgbmFtZSBpdCB3aWxsIGJlIHVzZWQgYXMgYSBmdWxsIG5hbWUuCiovfX0Ke3stIGRlZmluZSAiaXN0aW8uZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgY29udGFpbnMgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIC5SZWxlYXNlLk5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgY2hhcnQgbmFtZSBhbmQgdmVyc2lvbiBhcyB1c2VkIGJ5IHRoZSBjaGFydCBsYWJlbC4KKi99fQp7ey0gZGVmaW5lICJpc3Rpby5jaGFydCIgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuQ2hhcnQuTmFtZSAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGZ1bGx5IHF1YWxpZmllZCBjb25maWdtYXAgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJpc3Rpby5jb25maWdtYXAuZnVsbG5hbWUiIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAiaXN0aW8tbWVzaC1jb25maWciIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ29uZmlnbWFwIGNoZWNrc3VtLgoqL319Cnt7LSBkZWZpbmUgImlzdGlvLmNvbmZpZ21hcC5jaGVja3N1bSIgLX19Cnt7LSBwcmludCAkLlRlbXBsYXRlLkJhc2VQYXRoICIvY29uZmlnbWFwLnlhbWwiIHwgc2hhMjU2c3VtIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/configmap.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucGlsb3QuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBDb25maWdNYXAKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8KICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImlzdGlvLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiaXN0aW8uY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CmRhdGE6CiAgbWVzaDogfC0KICAgICMgU2V0IHRoZSBmb2xsb3dpbmcgdmFyaWFibGUgdG8gdHJ1ZSB0byBkaXNhYmxlIHBvbGljeSBjaGVja3MgYnkgdGhlIE1peGVyLgogICAgIyBOb3RlIHRoYXQgbWV0cmljcyB3aWxsIHN0aWxsIGJlIHJlcG9ydGVkIHRvIHRoZSBNaXhlci4KICAgIGRpc2FibGVQb2xpY3lDaGVja3M6IHt7IC5WYWx1ZXMuZ2xvYmFsLmRpc2FibGVQb2xpY3lDaGVja3MgfX0KCiAgICAjIFNldCBlbmFibGVUcmFjaW5nIHRvIGZhbHNlIHRvIGRpc2FibGUgcmVxdWVzdCB0cmFjaW5nLgogICAgZW5hYmxlVHJhY2luZzoge3sgLlZhbHVlcy5nbG9iYWwuZW5hYmxlVHJhY2luZyB9fQoKICAgICMgU2V0IGFjY2Vzc0xvZ0ZpbGUgdG8gZW1wdHkgc3RyaW5nIHRvIGRpc2FibGUgYWNjZXNzIGxvZy4KICAgIGFjY2Vzc0xvZ0ZpbGU6ICJ7eyAuVmFsdWVzLmdsb2JhbC5wcm94eS5hY2Nlc3NMb2dGaWxlIH19IgogICAgIwogICAgIyBEZXByZWNhdGVkOiBtaXhlciBpcyB1c2luZyBFRFMKICAgIHt7LSBpZiAuVmFsdWVzLm1peGVyLmVuYWJsZWQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmdsb2JhbC5jb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQgfX0KICAgIG1peGVyQ2hlY2tTZXJ2ZXI6IGlzdGlvLXBvbGljeS57eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0uc3ZjLmNsdXN0ZXIubG9jYWw6MTUwMDQKICAgIG1peGVyUmVwb3J0U2VydmVyOiBpc3Rpby10ZWxlbWV0cnkue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2Yy5jbHVzdGVyLmxvY2FsOjE1MDA0CiAgICB7ey0gZWxzZSB9fQogICAgbWl4ZXJDaGVja1NlcnZlcjogaXN0aW8tcG9saWN5Lnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMuY2x1c3Rlci5sb2NhbDo5MDkxCiAgICBtaXhlclJlcG9ydFNlcnZlcjogaXN0aW8tdGVsZW1ldHJ5Lnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMuY2x1c3Rlci5sb2NhbDo5MDkxCiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CgogICAge3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIH19CiAgICAjIFRoaXMgaXMgdGhlIGs4cyBpbmdyZXNzIHNlcnZpY2UgbmFtZSwgdXBkYXRlIGlmIHlvdSB1c2VkIGEgZGlmZmVyZW50IG5hbWUKICAgIGluZ3Jlc3NTZXJ2aWNlOiBpc3Rpby17eyAuVmFsdWVzLmdsb2JhbC5rOHNJbmdyZXNzU2VsZWN0b3IgfX0KICAgIHt7LSBlbmQgfX0KCiAgICAjIFVuaXggRG9tYWluIFNvY2tldCB0aHJvdWdoIHdoaWNoIGVudm95IGNvbW11bmljYXRlcyB3aXRoIE5vZGVBZ2VudCBTRFMgdG8gZ2V0CiAgICAjIGtleS9jZXJ0IGZvciBtVExTLiBVc2Ugc2VjcmV0LW1vdW50IGZpbGVzIGluc3RlYWQgb2YgU0RTIGlmIHNldCB0byBlbXB0eS4gCiAgICBzZHNVZHNQYXRoOiAiIgoKICAgICMKICAgIGRlZmF1bHRDb25maWc6CiAgICAgICMKICAgICAgIyBUQ1AgY29ubmVjdGlvbiB0aW1lb3V0IGJldHdlZW4gRW52b3kgJiB0aGUgYXBwbGljYXRpb24sIGFuZCBiZXR3ZWVuIEVudm95cy4KICAgICAgY29ubmVjdFRpbWVvdXQ6IDEwcwogICAgICAjCiAgICAgICMjIyBBRFZBTkNFRCBTRVRUSU5HUyAjIyMjIyMjIyMjIyMjCiAgICAgICMgV2hlcmUgc2hvdWxkIGVudm95J3MgY29uZmlndXJhdGlvbiBiZSBzdG9yZWQgaW4gdGhlIGlzdGlvLXByb3h5IGNvbnRhaW5lcgogICAgICBjb25maWdQYXRoOiAiL2V0Yy9pc3Rpby9wcm94eSIKICAgICAgYmluYXJ5UGF0aDogIi91c3IvbG9jYWwvYmluL2Vudm95IgogICAgICAjIFRoZSBwc2V1ZG8gc2VydmljZSBuYW1lIHVzZWQgZm9yIEVudm95LgogICAgICBzZXJ2aWNlQ2x1c3RlcjogaXN0aW8tcHJveHkKICAgICAgIyBUaGVzZSBzZXR0aW5ncyB0aGF0IGRldGVybWluZSBob3cgbG9uZyBhbiBvbGQgRW52b3kKICAgICAgIyBwcm9jZXNzIHNob3VsZCBiZSBrZXB0IGFsaXZlIGFmdGVyIGFuIG9jY2FzaW9uYWwgcmVsb2FkLgogICAgICBkcmFpbkR1cmF0aW9uOiA0NXMKICAgICAgcGFyZW50U2h1dGRvd25EdXJhdGlvbjogMW0wcwogICAgICAjCiAgICAgICMgVGhlIG1vZGUgdXNlZCB0byByZWRpcmVjdCBpbmJvdW5kIGNvbm5lY3Rpb25zIHRvIEVudm95LiBUaGlzIHNldHRpbmcKICAgICAgIyBoYXMgbm8gZWZmZWN0IG9uIG91dGJvdW5kIHRyYWZmaWM6IGlwdGFibGVzIFJFRElSRUNUIGlzIGFsd2F5cyB1c2VkIGZvcgogICAgICAjIG91dGJvdW5kIGNvbm5lY3Rpb25zLgogICAgICAjIElmICJSRURJUkVDVCIsIHVzZSBpcHRhYmxlcyBSRURJUkVDVCB0byBOQVQgYW5kIHJlZGlyZWN0IHRvIEVudm95LgogICAgICAjIFRoZSAiUkVESVJFQ1QiIG1vZGUgbG9zZXMgc291cmNlIGFkZHJlc3NlcyBkdXJpbmcgcmVkaXJlY3Rpb24uCiAgICAgICMgSWYgIlRQUk9YWSIsIHVzZSBpcHRhYmxlcyBUUFJPWFkgdG8gcmVkaXJlY3QgdG8gRW52b3kuCiAgICAgICMgVGhlICJUUFJPWFkiIG1vZGUgcHJlc2VydmVzIGJvdGggdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gSVAKICAgICAgIyBhZGRyZXNzZXMgYW5kIHBvcnRzLCBzbyB0aGF0IHRoZXkgY2FuIGJlIHVzZWQgZm9yIGFkdmFuY2VkIGZpbHRlcmluZwogICAgICAjIGFuZCBtYW5pcHVsYXRpb24uCiAgICAgICMgVGhlICJUUFJPWFkiIG1vZGUgYWxzbyBjb25maWd1cmVzIHRoZSBzaWRlY2FyIHRvIHJ1biB3aXRoIHRoZQogICAgICAjIENBUF9ORVRfQURNSU4gY2FwYWJpbGl0eSwgd2hpY2ggaXMgcmVxdWlyZWQgdG8gdXNlIFRQUk9YWS4KICAgICAgI2ludGVyY2VwdGlvbk1vZGU6IFJFRElSRUNUCiAgICAgICMKICAgICAgIyBQb3J0IHdoZXJlIEVudm95IGxpc3RlbnMgKG9uIGxvY2FsIGhvc3QpIGZvciBhZG1pbiBjb21tYW5kcwogICAgICAjIFlvdSBjYW4gZXhlYyBpbnRvIHRoZSBpc3Rpby1wcm94eSBjb250YWluZXIgaW4gYSBwb2QgYW5kCiAgICAgICMgY3VybCB0aGUgYWRtaW4gcG9ydCAoY3VybCBodHRwOi8vbG9jYWxob3N0OjE1MDAwLykgdG8gb2J0YWluCiAgICAgICMgZGlhZ25vc3RpYyBpbmZvcm1hdGlvbiBmcm9tIEVudm95LiBTZWUKICAgICAgIyBodHRwczovL2x5ZnQuZ2l0aHViLmlvL2Vudm95L2RvY3Mvb3BlcmF0aW9ucy9hZG1pbi5odG1sCiAgICAgICMgZm9yIG1vcmUgZGV0YWlscwogICAgICBwcm94eUFkbWluUG9ydDogMTUwMDAKICAgICAgIwogICAgICAjIFNldCBjb25jdXJyZW5jeSB0byBhIHNwZWNpZmljIG51bWJlciB0byBjb250cm9sIHRoZSBudW1iZXIgb2YgUHJveHkgd29ya2VyIHRocmVhZHMuCiAgICAgICMgSWYgc2V0IHRvIDAgKGRlZmF1bHQpLCB0aGVuIHN0YXJ0IHdvcmtlciB0aHJlYWQgZm9yIGVhY2ggQ1BVIHRocmVhZC9jb3JlLgogICAgICBjb25jdXJyZW5jeToge3sgLlZhbHVlcy5nbG9iYWwucHJveHkuY29uY3VycmVuY3kgfX0KICAgICAgIwogICAgICB0cmFjaW5nOgogICAgICB7ey0gaWYgZXEgLlZhbHVlcy5nbG9iYWwucHJveHkudHJhY2VyICJsaWdodHN0ZXAiIH19CiAgICAgICAgbGlnaHRzdGVwOgogICAgICAgICAgIyBBZGRyZXNzIG9mIHRoZSBMaWdodFN0ZXAgU2F0ZWxsaXRlIHBvb2wKICAgICAgICAgIGFkZHJlc3M6IHt7IC5WYWx1ZXMuZ2xvYmFsLnRyYWNlci5saWdodHN0ZXAuYWRkcmVzcyB9fQogICAgICAgICAgIyBBY2Nlc3MgVG9rZW4gdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBTYXRlbGxpdGUgcG9vbAogICAgICAgICAgYWNjZXNzVG9rZW46IHt7IC5WYWx1ZXMuZ2xvYmFsLnRyYWNlci5saWdodHN0ZXAuYWNjZXNzVG9rZW4gfX0KICAgICAgICAgICMgV2hldGhlciBjb21tdW5pY2F0aW9uIHdpdGggdGhlIFNhdGVsbGl0ZSBwb29sIHNob3VsZCBiZSBzZWN1cmUKICAgICAgICAgIHNlY3VyZToge3sgLlZhbHVlcy5nbG9iYWwudHJhY2VyLmxpZ2h0c3RlcC5zZWN1cmUgfX0KICAgICAgICAgICMgUGF0aCB0byB0aGUgZmlsZSBjb250YWluaW5nIHRoZSBjYWNlcnQgdG8gdXNlIHdoZW4gdmVyaWZ5aW5nIFRMUwogICAgICAgICAgY2FjZXJ0UGF0aDoge3sgLlZhbHVlcy5nbG9iYWwudHJhY2VyLmxpZ2h0c3RlcC5jYWNlcnRQYXRoIH19CiAgICAgIHt7LSBlbHNlIGlmIGVxIC5WYWx1ZXMuZ2xvYmFsLnByb3h5LnRyYWNlciAiemlwa2luIiB9fQogICAgICAgIHppcGtpbjoKICAgICAgICAgICMgQWRkcmVzcyBvZiB0aGUgWmlwa2luIGNvbGxlY3RvcgogICAgICAgIHt7LSBpZiAuVmFsdWVzLmdsb2JhbC50cmFjZXIuemlwa2luLmFkZHJlc3MgfX0KICAgICAgICAgIGFkZHJlc3M6IHt7IC5WYWx1ZXMuZ2xvYmFsLnRyYWNlci56aXBraW4uYWRkcmVzcyB9fQogICAgICAgIHt7LSBlbHNlIH19CiAgICAgICAgICBhZGRyZXNzOiB6aXBraW4ue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Ojk0MTEKICAgICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBlbmQgfX0KCiAgICB7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJveHkuZW52b3lTdGF0c2QuZW5hYmxlZCB9fQogICAgICAjCiAgICAgICMgU3RhdHNkIG1ldHJpY3MgY29sbGVjdG9yIGNvbnZlcnRzIHN0YXRzZCBtZXRyaWNzIGludG8gUHJvbWV0aGV1cyBtZXRyaWNzLgogICAgICBzdGF0c2RVZHBBZGRyZXNzOiB7eyAuVmFsdWVzLmdsb2JhbC5wcm94eS5lbnZveVN0YXRzZC5ob3N0IH19Lnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fTp7eyAuVmFsdWVzLmdsb2JhbC5wcm94eS5lbnZveVN0YXRzZC5wb3J0IH19CiAgICB7ey0gZW5kIH19CgogICAge3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZCB9fQogICAgICAjCiAgICAgICMgTXV0dWFsIFRMUyBhdXRoZW50aWNhdGlvbiBiZXR3ZWVuIHNpZGVjYXJzIGFuZCBpc3RpbyBjb250cm9sIHBsYW5lLgogICAgICBjb250cm9sUGxhbmVBdXRoUG9saWN5OiBNVVRVQUxfVExTCiAgICAgICMKICAgICAgIyBBZGRyZXNzIHdoZXJlIGlzdGlvIFBpbG90IHNlcnZpY2UgaXMgcnVubmluZwogICAgICBkaXNjb3ZlcnlBZGRyZXNzOiBpc3Rpby1waWxvdC57eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX06MTUwMTEKICAgIHt7LSBlbHNlIH19CiAgICAgICMKICAgICAgIyBNdXR1YWwgVExTIGF1dGhlbnRpY2F0aW9uIGJldHdlZW4gc2lkZWNhcnMgYW5kIGlzdGlvIGNvbnRyb2wgcGxhbmUuCiAgICAgIGNvbnRyb2xQbGFuZUF1dGhQb2xpY3k6IE5PTkUKICAgICAgIwogICAgICAjIEFkZHJlc3Mgd2hlcmUgaXN0aW8gUGlsb3Qgc2VydmljZSBpcyBydW5uaW5nCiAgICAgIGRpc2NvdmVyeUFkZHJlc3M6IGlzdGlvLXBpbG90Lnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fToxNTAxMAogICAge3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "templates/crds.yaml",
          "fileContents": "IyB7eyBpZiBvciAuVmFsdWVzLmdsb2JhbC5jcmRzIChzZW12ZXJDb21wYXJlICI+PTIuMTAuMC0wIiAuQ2FwYWJpbGl0aWVzLlRpbGxlclZlcnNpb24uU2VtVmVyKSB9fQojIHRoZXNlIENSRHMgb25seSBtYWtlIHNlbnNlIHdoZW4gcGlsb3QgaXMgZW5hYmxlZAojIHt7LSBpZiBvciAuVmFsdWVzLnBpbG90LmVuYWJsZWQgLlZhbHVlcy5nbG9iYWwudXNlTUNQIH19CmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IHZpcnR1YWxzZXJ2aWNlcy5uZXR3b3JraW5nLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLXBpbG90CiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IG5ldHdvcmtpbmcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IFZpcnR1YWxTZXJ2aWNlCiAgICBsaXN0S2luZDogVmlydHVhbFNlcnZpY2VMaXN0CiAgICBwbHVyYWw6IHZpcnR1YWxzZXJ2aWNlcwogICAgc2luZ3VsYXI6IHZpcnR1YWxzZXJ2aWNlCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBuZXR3b3JraW5nLWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMwotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogZGVzdGluYXRpb25ydWxlcy5uZXR3b3JraW5nLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLXBpbG90CiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IG5ldHdvcmtpbmcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IERlc3RpbmF0aW9uUnVsZQogICAgbGlzdEtpbmQ6IERlc3RpbmF0aW9uUnVsZUxpc3QKICAgIHBsdXJhbDogZGVzdGluYXRpb25ydWxlcwogICAgc2luZ3VsYXI6IGRlc3RpbmF0aW9ucnVsZQogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gbmV0d29ya2luZy1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTMKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IHNlcnZpY2VlbnRyaWVzLm5ldHdvcmtpbmcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tcGlsb3QKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogbmV0d29ya2luZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogU2VydmljZUVudHJ5CiAgICBsaXN0S2luZDogU2VydmljZUVudHJ5TGlzdAogICAgcGx1cmFsOiBzZXJ2aWNlZW50cmllcwogICAgc2luZ3VsYXI6IHNlcnZpY2VlbnRyeQogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gbmV0d29ya2luZy1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTMKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IGdhdGV3YXlzLm5ldHdvcmtpbmcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogICAgImhlbG0uc2gvaG9vay13ZWlnaHQiOiAiLTUiCiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1waWxvdAogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBuZXR3b3JraW5nLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBHYXRld2F5CiAgICBwbHVyYWw6IGdhdGV3YXlzCiAgICBzaW5ndWxhcjogZ2F0ZXdheQogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gbmV0d29ya2luZy1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTMgCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBlbnZveWZpbHRlcnMubmV0d29ya2luZy5pc3Rpby5pbwogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IGNyZC1pbnN0YWxsCiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1waWxvdAogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBuZXR3b3JraW5nLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBFbnZveUZpbHRlcgogICAgcGx1cmFsOiBlbnZveWZpbHRlcnMKICAgIHNpbmd1bGFyOiBlbnZveWZpbHRlcgogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gbmV0d29ya2luZy1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTMKLS0tCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IGNsdXN0ZXJyYmFjY29uZmlncy5yYmFjLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IGlzdGlvLXBpbG90CiAgICBpc3RpbzogcmJhYwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogcmJhYy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogQ2x1c3RlclJiYWNDb25maWcKICAgIHBsdXJhbDogY2x1c3RlcnJiYWNjb25maWdzCiAgICBzaW5ndWxhcjogY2x1c3RlcnJiYWNjb25maWcKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHJiYWMtaXN0aW8taW8KICBzY29wZTogQ2x1c3RlcgogIHZlcnNpb246IHYxYWxwaGExCi0tLQojIHt7LSBlbmQgfX0KCiMgdGhlc2UgQ1JEcyBvbmx5IG1ha2Ugc2Vuc2Ugd2hlbiBzZWN1cml0eSBpcyBlbmFibGVkCiMge3stIGlmIG9yIC5WYWx1ZXMuc2VjdXJpdHkuZW5hYmxlZCAuVmFsdWVzLmdsb2JhbC51c2VNQ1AgfX0Ka2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogcG9saWNpZXMuYXV0aGVudGljYXRpb24uaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tY2l0YWRlbAogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBhdXRoZW50aWNhdGlvbi5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogUG9saWN5CiAgICBwbHVyYWw6IHBvbGljaWVzCiAgICBzaW5ndWxhcjogcG9saWN5CiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBhdXRoZW50aWNhdGlvbi1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTEKLS0tCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IG1lc2hwb2xpY2llcy5hdXRoZW50aWNhdGlvbi5pc3Rpby5pbwogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IGNyZC1pbnN0YWxsCiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1jaXRhZGVsCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBNZXNoUG9saWN5CiAgICBsaXN0S2luZDogTWVzaFBvbGljeUxpc3QKICAgIHBsdXJhbDogbWVzaHBvbGljaWVzCiAgICBzaW5ndWxhcjogbWVzaHBvbGljeQogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gYXV0aGVudGljYXRpb24taXN0aW8taW8KICBzY29wZTogQ2x1c3RlcgogIHZlcnNpb246IHYxYWxwaGExCi0tLQojIHt7LSBlbmQgfX0KCiMge3stIGlmIG9yIC5WYWx1ZXMubWl4ZXIuZW5hYmxlZCAuVmFsdWVzLmdsb2JhbC51c2VNQ1AgfX0Ka2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogaHR0cGFwaXNwZWNiaW5kaW5ncy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tbWl4ZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBIVFRQQVBJU3BlY0JpbmRpbmcKICAgIHBsdXJhbDogaHR0cGFwaXNwZWNiaW5kaW5ncwogICAgc2luZ3VsYXI6IGh0dHBhcGlzcGVjYmluZGluZwogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gYXBpbS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IGh0dHBhcGlzcGVjcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tbWl4ZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBIVFRQQVBJU3BlYwogICAgcGx1cmFsOiBodHRwYXBpc3BlY3MKICAgIHNpbmd1bGFyOiBodHRwYXBpc3BlYwogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gYXBpbS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IHF1b3Rhc3BlY2JpbmRpbmdzLmNvbmZpZy5pc3Rpby5pbwogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IGNyZC1pbnN0YWxsCiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1taXhlcgogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IFF1b3RhU3BlY0JpbmRpbmcKICAgIHBsdXJhbDogcXVvdGFzcGVjYmluZGluZ3MKICAgIHNpbmd1bGFyOiBxdW90YXNwZWNiaW5kaW5nCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBhcGltLWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0Ka2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogcXVvdGFzcGVjcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogaXN0aW8tbWl4ZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBRdW90YVNwZWMKICAgIHBsdXJhbDogcXVvdGFzcGVjcwogICAgc2luZ3VsYXI6IHF1b3Rhc3BlYwogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gYXBpbS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgojIE1peGVyIENSRHMKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogcnVsZXMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBpc3Rpby5pby5taXhlcgogICAgaXN0aW86IGNvcmUKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBydWxlCiAgICBwbHVyYWw6IHJ1bGVzCiAgICBzaW5ndWxhcjogcnVsZQogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcG9saWN5LWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0KCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IGF0dHJpYnV0ZW1hbmlmZXN0cy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IGlzdGlvLmlvLm1peGVyCiAgICBpc3RpbzogY29yZQogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IGF0dHJpYnV0ZW1hbmlmZXN0CiAgICBwbHVyYWw6IGF0dHJpYnV0ZW1hbmlmZXN0cwogICAgc2luZ3VsYXI6IGF0dHJpYnV0ZW1hbmlmZXN0CiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogYnlwYXNzZXMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBieXBhc3MKICAgIGlzdGlvOiBtaXhlci1hZGFwdGVyCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogYnlwYXNzCiAgICBwbHVyYWw6IGJ5cGFzc2VzCiAgICBzaW5ndWxhcjogYnlwYXNzCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogY2lyY29udXNlcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IGNpcmNvbnVzCiAgICBpc3RpbzogbWl4ZXItYWRhcHRlcgogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IGNpcmNvbnVzCiAgICBwbHVyYWw6IGNpcmNvbnVzZXMKICAgIHNpbmd1bGFyOiBjaXJjb251cwogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcG9saWN5LWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0KCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IGRlbmllcnMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBkZW5pZXIKICAgIGlzdGlvOiBtaXhlci1hZGFwdGVyCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogZGVuaWVyCiAgICBwbHVyYWw6IGRlbmllcnMKICAgIHNpbmd1bGFyOiBkZW5pZXIKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBmbHVlbnRkcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IGZsdWVudGQKICAgIGlzdGlvOiBtaXhlci1hZGFwdGVyCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogZmx1ZW50ZAogICAgcGx1cmFsOiBmbHVlbnRkcwogICAgc2luZ3VsYXI6IGZsdWVudGQKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBrdWJlcm5ldGVzZW52cy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IGt1YmVybmV0ZXNlbnYKICAgIGlzdGlvOiBtaXhlci1hZGFwdGVyCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDoga3ViZXJuZXRlc2VudgogICAgcGx1cmFsOiBrdWJlcm5ldGVzZW52cwogICAgc2luZ3VsYXI6IGt1YmVybmV0ZXNlbnYKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBsaXN0Y2hlY2tlcnMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBsaXN0Y2hlY2tlcgogICAgaXN0aW86IG1peGVyLWFkYXB0ZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBsaXN0Y2hlY2tlcgogICAgcGx1cmFsOiBsaXN0Y2hlY2tlcnMKICAgIHNpbmd1bGFyOiBsaXN0Y2hlY2tlcgogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcG9saWN5LWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0KCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IG1lbXF1b3Rhcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IG1lbXF1b3RhCiAgICBpc3RpbzogbWl4ZXItYWRhcHRlcgogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IG1lbXF1b3RhCiAgICBwbHVyYWw6IG1lbXF1b3RhcwogICAgc2luZ3VsYXI6IG1lbXF1b3RhCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogbm9vcHMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBub29wCiAgICBpc3RpbzogbWl4ZXItYWRhcHRlcgogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IG5vb3AKICAgIHBsdXJhbDogbm9vcHMKICAgIHNpbmd1bGFyOiBub29wCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogb3Bhcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IG9wYQogICAgaXN0aW86IG1peGVyLWFkYXB0ZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBvcGEKICAgIHBsdXJhbDogb3BhcwogICAgc2luZ3VsYXI6IG9wYQogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcG9saWN5LWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0KCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IHByb21ldGhldXNlcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IHByb21ldGhldXMKICAgIGlzdGlvOiBtaXhlci1hZGFwdGVyCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogcHJvbWV0aGV1cwogICAgcGx1cmFsOiBwcm9tZXRoZXVzZXMKICAgIHNpbmd1bGFyOiBwcm9tZXRoZXVzCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogcmJhY3MuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiByYmFjCiAgICBpc3RpbzogbWl4ZXItYWRhcHRlcgogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IHJiYWMKICAgIHBsdXJhbDogcmJhY3MKICAgIHNpbmd1bGFyOiByYmFjCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogcmVkaXNxdW90YXMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiByZWRpc3F1b3RhCiAgICBpc3RpbzogbWl4ZXItYWRhcHRlcgogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IHJlZGlzcXVvdGEKICAgIHBsdXJhbDogcmVkaXNxdW90YXMKICAgIHNpbmd1bGFyOiByZWRpc3F1b3RhCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0KCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IHNlcnZpY2Vjb250cm9scy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IHNlcnZpY2Vjb250cm9sCiAgICBpc3RpbzogbWl4ZXItYWRhcHRlcgogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IHNlcnZpY2Vjb250cm9sCiAgICBwbHVyYWw6IHNlcnZpY2Vjb250cm9scwogICAgc2luZ3VsYXI6IHNlcnZpY2Vjb250cm9sCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCgotLS0KCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IHNpZ25hbGZ4cy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IHNpZ25hbGZ4CiAgICBpc3RpbzogbWl4ZXItYWRhcHRlcgogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IHNpZ25hbGZ4CiAgICBwbHVyYWw6IHNpZ25hbGZ4cwogICAgc2luZ3VsYXI6IHNpZ25hbGZ4CiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogc29sYXJ3aW5kc2VzLmNvbmZpZy5pc3Rpby5pbwogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IGNyZC1pbnN0YWxsCiAgbGFiZWxzOgogICAgYXBwOiBtaXhlcgogICAgcGFja2FnZTogc29sYXJ3aW5kcwogICAgaXN0aW86IG1peGVyLWFkYXB0ZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBzb2xhcndpbmRzCiAgICBwbHVyYWw6IHNvbGFyd2luZHNlcwogICAgc2luZ3VsYXI6IHNvbGFyd2luZHMKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBzdGFja2RyaXZlcnMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBzdGFja2RyaXZlcgogICAgaXN0aW86IG1peGVyLWFkYXB0ZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBzdGFja2RyaXZlcgogICAgcGx1cmFsOiBzdGFja2RyaXZlcnMKICAgIHNpbmd1bGFyOiBzdGFja2RyaXZlcgogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcG9saWN5LWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0KCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IHN0YXRzZHMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBzdGF0c2QKICAgIGlzdGlvOiBtaXhlci1hZGFwdGVyCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogc3RhdHNkCiAgICBwbHVyYWw6IHN0YXRzZHMKICAgIHNpbmd1bGFyOiBzdGF0c2QKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBzdGRpb3MuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBzdGRpbwogICAgaXN0aW86IG1peGVyLWFkYXB0ZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBzdGRpbwogICAgcGx1cmFsOiBzdGRpb3MKICAgIHNpbmd1bGFyOiBzdGRpbwogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcG9saWN5LWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0KCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IGFwaWtleXMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBhcGlrZXkKICAgIGlzdGlvOiBtaXhlci1pbnN0YW5jZQogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IGFwaWtleQogICAgcGx1cmFsOiBhcGlrZXlzCiAgICBzaW5ndWxhcjogYXBpa2V5CiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogYXV0aG9yaXphdGlvbnMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBhdXRob3JpemF0aW9uCiAgICBpc3RpbzogbWl4ZXItaW5zdGFuY2UKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBhdXRob3JpemF0aW9uCiAgICBwbHVyYWw6IGF1dGhvcml6YXRpb25zCiAgICBzaW5ndWxhcjogYXV0aG9yaXphdGlvbgogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcG9saWN5LWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0KCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IGNoZWNrbm90aGluZ3MuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBjaGVja25vdGhpbmcKICAgIGlzdGlvOiBtaXhlci1pbnN0YW5jZQogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IGNoZWNrbm90aGluZwogICAgcGx1cmFsOiBjaGVja25vdGhpbmdzCiAgICBzaW5ndWxhcjogY2hlY2tub3RoaW5nCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZToga3ViZXJuZXRlc2VzLmNvbmZpZy5pc3Rpby5pbwogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IGNyZC1pbnN0YWxsCiAgbGFiZWxzOgogICAgYXBwOiBtaXhlcgogICAgcGFja2FnZTogYWRhcHRlci50ZW1wbGF0ZS5rdWJlcm5ldGVzCiAgICBpc3RpbzogbWl4ZXItaW5zdGFuY2UKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBrdWJlcm5ldGVzCiAgICBwbHVyYWw6IGt1YmVybmV0ZXNlcwogICAgc2luZ3VsYXI6IGt1YmVybmV0ZXMKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBsaXN0ZW50cmllcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IGxpc3RlbnRyeQogICAgaXN0aW86IG1peGVyLWluc3RhbmNlCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogbGlzdGVudHJ5CiAgICBwbHVyYWw6IGxpc3RlbnRyaWVzCiAgICBzaW5ndWxhcjogbGlzdGVudHJ5CiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogbG9nZW50cmllcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IGxvZ2VudHJ5CiAgICBpc3RpbzogbWl4ZXItaW5zdGFuY2UKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBsb2dlbnRyeQogICAgcGx1cmFsOiBsb2dlbnRyaWVzCiAgICBzaW5ndWxhcjogbG9nZW50cnkKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBlZGdlcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IGVkZ2UKICAgIGlzdGlvOiBtaXhlci1pbnN0YW5jZQogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IGVkZ2UKICAgIHBsdXJhbDogZWRnZXMKICAgIHNpbmd1bGFyOiBlZGdlCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogbWV0cmljcy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IG1ldHJpYwogICAgaXN0aW86IG1peGVyLWluc3RhbmNlCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogbWV0cmljCiAgICBwbHVyYWw6IG1ldHJpY3MKICAgIHNpbmd1bGFyOiBtZXRyaWMKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBxdW90YXMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBxdW90YQogICAgaXN0aW86IG1peGVyLWluc3RhbmNlCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogcXVvdGEKICAgIHBsdXJhbDogcXVvdGFzCiAgICBzaW5ndWxhcjogcXVvdGEKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiByZXBvcnRub3RoaW5ncy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IHJlcG9ydG5vdGhpbmcKICAgIGlzdGlvOiBtaXhlci1pbnN0YW5jZQogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IHJlcG9ydG5vdGhpbmcKICAgIHBsdXJhbDogcmVwb3J0bm90aGluZ3MKICAgIHNpbmd1bGFyOiByZXBvcnRub3RoaW5nCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogc2VydmljZWNvbnRyb2xyZXBvcnRzLmNvbmZpZy5pc3Rpby5pbwogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IGNyZC1pbnN0YWxsCiAgbGFiZWxzOgogICAgYXBwOiBtaXhlcgogICAgcGFja2FnZTogc2VydmljZWNvbnRyb2xyZXBvcnQKICAgIGlzdGlvOiBtaXhlci1pbnN0YW5jZQogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IHNlcnZpY2Vjb250cm9scmVwb3J0CiAgICBwbHVyYWw6IHNlcnZpY2Vjb250cm9scmVwb3J0cwogICAgc2luZ3VsYXI6IHNlcnZpY2Vjb250cm9scmVwb3J0CiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogdHJhY2VzcGFucy5jb25maWcuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IHRyYWNlc3BhbgogICAgaXN0aW86IG1peGVyLWluc3RhbmNlCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogdHJhY2VzcGFuCiAgICBwbHVyYWw6IHRyYWNlc3BhbnMKICAgIHNpbmd1bGFyOiB0cmFjZXNwYW4KICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiByYmFjY29uZmlncy5yYmFjLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiBpc3Rpby5pby5taXhlcgogICAgaXN0aW86IHJiYWMKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogcmJhYy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogUmJhY0NvbmZpZwogICAgcGx1cmFsOiByYmFjY29uZmlncwogICAgc2luZ3VsYXI6IHJiYWNjb25maWcKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHJiYWMtaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGExCi0tLQoKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogc2VydmljZXJvbGVzLnJiYWMuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IGlzdGlvLmlvLm1peGVyCiAgICBpc3RpbzogcmJhYwogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiByYmFjLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBTZXJ2aWNlUm9sZQogICAgcGx1cmFsOiBzZXJ2aWNlcm9sZXMKICAgIHNpbmd1bGFyOiBzZXJ2aWNlcm9sZQogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcmJhYy1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTEKLS0tCgpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBzZXJ2aWNlcm9sZWJpbmRpbmdzLnJiYWMuaXN0aW8uaW8KICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiBjcmQtaW5zdGFsbAogIGxhYmVsczoKICAgIGFwcDogbWl4ZXIKICAgIHBhY2thZ2U6IGlzdGlvLmlvLm1peGVyCiAgICBpc3RpbzogcmJhYwogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiByYmFjLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBTZXJ2aWNlUm9sZUJpbmRpbmcKICAgIHBsdXJhbDogc2VydmljZXJvbGViaW5kaW5ncwogICAgc2luZ3VsYXI6IHNlcnZpY2Vyb2xlYmluZGluZwogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcmJhYy1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTEKLS0tCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IGFkYXB0ZXJzLmNvbmZpZy5pc3Rpby5pbwogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IGNyZC1pbnN0YWxsCiAgbGFiZWxzOgogICAgYXBwOiBtaXhlcgogICAgcGFja2FnZTogYWRhcHRlcgogICAgaXN0aW86IG1peGVyLWFkYXB0ZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBhZGFwdGVyCiAgICBwbHVyYWw6IGFkYXB0ZXJzCiAgICBzaW5ndWxhcjogYWRhcHRlcgogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcG9saWN5LWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0Ka2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogaW5zdGFuY2VzLmNvbmZpZy5pc3Rpby5pbwogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IGNyZC1pbnN0YWxsCiAgbGFiZWxzOgogICAgYXBwOiBtaXhlcgogICAgcGFja2FnZTogaW5zdGFuY2UKICAgIGlzdGlvOiBtaXhlci1pbnN0YW5jZQogICAgY2hhcnQ6IGlzdGlvCiAgICBoZXJpdGFnZTogVGlsbGVyCiAgICByZWxlYXNlOiBpc3RpbwpzcGVjOgogIGdyb3VwOiBjb25maWcuaXN0aW8uaW8KICBuYW1lczoKICAgIGtpbmQ6IGluc3RhbmNlCiAgICBwbHVyYWw6IGluc3RhbmNlcwogICAgc2luZ3VsYXI6IGluc3RhbmNlCiAgICBjYXRlZ29yaWVzOgogICAgLSBpc3Rpby1pbwogICAgLSBwb2xpY3ktaXN0aW8taW8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxYWxwaGEyCi0tLQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiB0ZW1wbGF0ZXMuY29uZmlnLmlzdGlvLmlvCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogY3JkLWluc3RhbGwKICBsYWJlbHM6CiAgICBhcHA6IG1peGVyCiAgICBwYWNrYWdlOiB0ZW1wbGF0ZQogICAgaXN0aW86IG1peGVyLXRlbXBsYXRlCiAgICBjaGFydDogaXN0aW8KICAgIGhlcml0YWdlOiBUaWxsZXIKICAgIHJlbGVhc2U6IGlzdGlvCnNwZWM6CiAgZ3JvdXA6IGNvbmZpZy5pc3Rpby5pbwogIG5hbWVzOgogICAga2luZDogdGVtcGxhdGUKICAgIHBsdXJhbDogdGVtcGxhdGVzCiAgICBzaW5ndWxhcjogdGVtcGxhdGUKICAgIGNhdGVnb3JpZXM6CiAgICAtIGlzdGlvLWlvCiAgICAtIHBvbGljeS1pc3Rpby1pbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjFhbHBoYTIKLS0tCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IGhhbmRsZXJzLmNvbmZpZy5pc3Rpby5pbwogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IGNyZC1pbnN0YWxsCiAgbGFiZWxzOgogICAgYXBwOiBtaXhlcgogICAgcGFja2FnZTogaGFuZGxlcgogICAgaXN0aW86IG1peGVyLWhhbmRsZXIKICAgIGNoYXJ0OiBpc3RpbwogICAgaGVyaXRhZ2U6IFRpbGxlcgogICAgcmVsZWFzZTogaXN0aW8Kc3BlYzoKICBncm91cDogY29uZmlnLmlzdGlvLmlvCiAgbmFtZXM6CiAgICBraW5kOiBoYW5kbGVyCiAgICBwbHVyYWw6IGhhbmRsZXJzCiAgICBzaW5ndWxhcjogaGFuZGxlcgogICAgY2F0ZWdvcmllczoKICAgIC0gaXN0aW8taW8KICAgIC0gcG9saWN5LWlzdGlvLWlvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MWFscGhhMgotLS0KIyB7ey0gZW5kIH19CiMge3sgZW5kIH19Cg=="
        },
        {
          "filePath": "templates/install-custom-resources.sh.tpl",
          "fileContents": "e3sgZGVmaW5lICJpbnN0YWxsLWN1c3RvbS1yZXNvdXJjZXMuc2gudHBsIiB9fQojIS9iaW4vc2gKCnNldCAteAoKaWYgWyAiJCMiIC1uZSAiMSIgXTsgdGhlbgogICAgZWNobyAiZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIHBhdGggdG8gY3VzdG9tIHJlc291cmNlIHlhbWwiCiAgICBleGl0IDEKZmkKCnBhdGhUb1Jlc291cmNlWUFNTD0kezF9CgprdWJlY3RsIGdldCB2YWxpZGF0aW5nd2ViaG9va2NvbmZpZ3VyYXRpb24gaXN0aW8tZ2FsbGV5IDI+L2Rldi9udWxsCmlmIFsgIiQ/IiAtZXEgMCBdOyB0aGVuCiAgICBlY2hvICJpc3Rpby1nYWxsZXkgdmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9uIGZvdW5kIC0gd2FpdGluZyBmb3IgaXN0aW8tZ2FsbGV5IGRlcGxveW1lbnQgdG8gYmUgcmVhZHkiCiAgICB3aGlsZSB0cnVlOyBkbwogICAgICAgIGt1YmVjdGwgLW4ge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IGdldCBkZXBsb3ltZW50IGlzdGlvLWdhbGxleSAyPi9kZXYvbnVsbAogICAgICAgIGlmIFsgIiQ/IiAtZXEgMCBdOyB0aGVuCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZmkKICAgICAgICBzbGVlcCAxCiAgICBkb25lCiAgICBrdWJlY3RsIC1uIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSByb2xsb3V0IHN0YXR1cyBkZXBsb3ltZW50IGlzdGlvLWdhbGxleQogICAgaWYgWyAiJD8iIC1uZSAwIF07IHRoZW4KICAgICAgICBlY2hvICJpc3Rpby1nYWxsZXkgZGVwbG95bWVudCByb2xsb3V0IHN0YXR1cyBjaGVjayBmYWlsZWQiCiAgICAgICAgZXhpdCAxCiAgICBmaQogICAgZWNobyAiaXN0aW8tZ2FsbGV5IGRlcGxveW1lbnQgcmVhZHkgZm9yIGNvbmZpZ3VyYXRpb24gdmFsaWRhdGlvbiIKZmkKc2xlZXAgNQprdWJlY3RsIGFwcGx5IC1mICR7cGF0aFRvUmVzb3VyY2VZQU1MfQp7eyBlbmQgfX0K"
        },
        {
          "filePath": "templates/sidecar-injector-configmap.yaml",
          "fileContents": ""
        },
        {
          "filePath": "values-istio-auth-mcp.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbApnbG9iYWw6CiAgIyBjb250cm9sUGxhbmVNdGxzIGVuYWJsZWQuIFdpbGwgcmVzdWx0IGluIGRlbGF5cyBzdGFydGluZyB0aGUgcG9kcyB3aGlsZSBzZWNyZXRzIGFyZQogICMgcHJvcGFnYXRlZCwgbm90IHJlY29tbWVuZGVkIGZvciB0ZXN0cy4KICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IHRydWUKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiB0cnVlCgogICMjIGltYWdlUHVsbFNlY3JldHMgZm9yIGFsbCBTZXJ2aWNlQWNjb3VudC4gTXVzdCBiZSBzZXQgZm9yIGFueSBjbHVzdHNlciBjb25maWd1cmVkIHdpdGggcHJpdmF0ZSBkb2NrZXIgcmVnaXN0cnkuCiAgIyBpbWFnZVB1bGxTZWNyZXRzOgogICMgICAtIG5hbWU6ICJwcml2YXRlLXJlZ2lzdHJ5LWtleSIKCiAgIyBEZWZhdWx0IGlzIDEwcyBzZWNvbmQKICByZWZyZXNoSW50ZXJ2YWw6IDFzCgogIHVzZU1DUDogdHJ1ZQoKaXN0aW90ZXN0aW5nOgogIG9uZU5hbWVTcGFjZTogZmFsc2UKCnByb21ldGhldXM6CiAgZW5hYmxlZDogdHJ1ZQoKZ2FsbGV5OgogIGVuYWJsZWQ6IHRydWUKCnNlY3VyaXR5OgogIGVuYWJsZWQ6IHRydWUK"
        },
        {
          "filePath": "values-istio-auth-multicluster.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC1tdWx0aWNsdXN0ZXIueWFtbCwgdXNlZCBmb3IgQ0kvQ0QuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZU10bHMgZW5hYmxlZC4gV2lsbCByZXN1bHQgaW4gZGVsYXlzIHN0YXJ0aW5nIHRoZSBwb2RzIHdoaWxlIHNlY3JldHMgYXJlCiAgIyBwcm9wYWdhdGVkLCBub3QgcmVjb21tZW5kZWQgZm9yIHRlc3RzLgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogdHJ1ZQoKICBtdGxzOgogICAgIyBEZWZhdWx0IHNldHRpbmcgZm9yIHNlcnZpY2UtdG8tc2VydmljZSBtdGxzLiBDYW4gYmUgc2V0IGV4cGxpY2l0bHkgdXNpbmcKICAgICMgZGVzdGluYXRpb24gcnVsZXMgb3Igc2VydmljZSBhbm5vdGF0aW9ucy4KICAgIGVuYWJsZWQ6IHRydWUKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2YXRlIGRvY2tlciByZWdpc3RyeS4KICAjIGltYWdlUHVsbFNlY3JldHM6CiAgIyAgIC0gbmFtZTogInByaXZhdGUtcmVnaXN0cnkta2V5IgoKICAjIERlZmF1bHQgaXMgMTBzIHNlY29uZAogIHJlZnJlc2hJbnRlcnZhbDogMXMKCiMgSW4gYSBtdWx0aXBsZSBjbHVzdGVyIGVudmlyb25tZW50LCBjaXRhZGVsIHVzZXMgdGhlIHNhbWUgcm9vdCBjZXJ0aWZpY2F0ZSBpbiBhbGwgdGhlIGNsdXN0ZXJzCnNlY3VyaXR5OgogIHNlbGZTaWduZWQ6IGZhbHNlCg=="
        },
        {
          "filePath": "values-istio-auth.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC55YW1sIGZvciBhdXRvbWF0ZWQgQ0kvQ0QgdGVzdCwgdXNpbmcgdjEvYWxwaGExCiMgb3IgdjIvYWxwaGEzIHdpdGggJ2dyYWR1YWwgbWlncmF0aW9uJyAodXNpbmcgZW52IHZhcmlhYmxlIGF0IGluamVjdCB0aW1lKS4KZ2xvYmFsOgogICMgY29udHJvbFBsYW5lTXRscyBlbmFibGVkLiBXaWxsIHJlc3VsdCBpbiBkZWxheXMgc3RhcnRpbmcgdGhlIHBvZHMgd2hpbGUgc2VjcmV0cyBhcmUKICAjIHByb3BhZ2F0ZWQsIG5vdCByZWNvbW1lbmRlZCBmb3IgdGVzdHMuCiAgY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkOiB0cnVlCgogIG10bHM6CiAgICAjIERlZmF1bHQgc2V0dGluZyBmb3Igc2VydmljZS10by1zZXJ2aWNlIG10bHMuIENhbiBiZSBzZXQgZXhwbGljaXRseSB1c2luZwogICAgIyBkZXN0aW5hdGlvbiBydWxlcyBvciBzZXJ2aWNlIGFubm90YXRpb25zLgogICAgZW5hYmxlZDogdHJ1ZQoKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2YXRlIGRvY2tlciByZWdpc3RyeS4KICAjIGltYWdlUHVsbFNlY3JldHM6CiAgIyAgIC0gbmFtZTogInByaXZhdGUtcmVnaXN0cnkta2V5IgoKICAjIERlZmF1bHQgaXMgMTBzIHNlY29uZAogIHJlZnJlc2hJbnRlcnZhbDogMXMKCg=="
        },
        {
          "filePath": "values-istio-demo-auth.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC55YW1sIGZvciBtaW5pbWFsLCBkZW1vIG1vZGUgd2l0aCBNVExTIGVuYWJsZWQuCiMgSXQgaXMgc2hpcHBlZCB3aXRoIHRoZSByZWxlYXNlLCB1c2VkIGZvciBib29raW5mbyBvciBxdWljayBpbnN0YWxsYXRpb24gb2YgaXN0aW8uCiMgSW5jbHVkZXMgY29tcG9uZW50cyB1c2VkIGluIHRoZSBkZW1vLCBkZWZhdWx0cyB0byBhbHBoYTMgcnVsZXMuCmdsb2JhbDoKICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IHRydWUKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiB0cnVlCgppbmdyZXNzOgogICMgSW5ncmVzcyBpcyB1c2VkIGZvciBtaWdyYXRpb24sIGZvciBhbHBoYTMgd2UgZXhwZWN0IGluZ3Jlc3NnYXRld2F5CiAgZW5hYmxlZDogZmFsc2UKCnByb21ldGhldXM6CiAgZW5hYmxlZDogdHJ1ZQoKcGlsb3Q6CiAgdHJhY2VTYW1wbGluZzogMTAwLjAKCnNpZGVjYXJJbmplY3RvcldlYmhvb2s6CiAgZW5hYmxlZDogdHJ1ZQogIGVuYWJsZU5hbWVzcGFjZXNCeURlZmF1bHQ6IGZhbHNlCgpncmFmYW5hOgogIGVuYWJsZWQ6IHRydWUKCnRyYWNpbmc6CiAgZW5hYmxlZDogdHJ1ZQoKc2VydmljZWdyYXBoOgogIGVuYWJsZWQ6IHRydWUKCmdhbGxleToKICBlbmFibGVkOiB0cnVlCgpraWFsaToKICBlbmFibGVkOiB0cnVlCg=="
        },
        {
          "filePath": "values-istio-demo.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCBmb3IgbWluaW1hbCwgZGVtbyBtb2RlLgojIEl0IGlzIHNoaXBwZWQgd2l0aCB0aGUgcmVsZWFzZSwgdXNlZCBmb3IgYm9va2luZm8gb3IgcXVpY2sgaW5zdGFsbGF0aW9uIG9mIGlzdGlvLgojIEluY2x1ZGVzIGNvbXBvbmVudHMgdXNlZCBpbiB0aGUgZGVtbywgZGVmYXVsdHMgdG8gYWxwaGEzIHJ1bGVzLgoKIyBJZiBydW5uaW5nIGluIG1pbmlrdWJlIHlvdSBtYXkgYWRkOgojIC0tc2V0IGdsb2JhbC5ub2RlUG9ydD10cnVlCiMgLS1zZXQgaW5ncmVzc2dhdGV3YXkuc2VydmljZS50eXBlPU5vZGVQb3J0Cmdsb2JhbDoKICBub2RlUG9ydDogZmFsc2UKCmluZ3Jlc3M6CiAgIyBJbmdyZXNzIGlzIHVzZWQgZm9yIG1pZ3JhdGlvbiwgZm9yIGFscGhhMyB3ZSBleHBlY3QgaW5ncmVzc2dhdGV3YXkKICBlbmFibGVkOiBmYWxzZQoKcHJvbWV0aGV1czoKICBlbmFibGVkOiB0cnVlCgpwaWxvdDoKICB0cmFjZVNhbXBsaW5nOiAxMDAuMAoKc2lkZWNhckluamVjdG9yV2ViaG9vazoKICBlbmFibGVkOiB0cnVlCiAgZW5hYmxlTmFtZXNwYWNlc0J5RGVmYXVsdDogZmFsc2UKCmdyYWZhbmE6CiAgZW5hYmxlZDogdHJ1ZQoKdHJhY2luZzoKICBlbmFibGVkOiB0cnVlCgpzZXJ2aWNlZ3JhcGg6CiAgZW5hYmxlZDogdHJ1ZQoKZ2FsbGV5OgogIGVuYWJsZWQ6IHRydWUKCmtpYWxpOgogIGVuYWJsZWQ6IHRydWUK"
        },
        {
          "filePath": "values-istio-gateways.yaml",
          "fileContents": "IyBDb21tb24gc2V0dGluZ3MuCmdsb2JhbDoKICAjIEluY2x1ZGUgdGhlIGNyZCBkZWZpbml0aW9uIHdoZW4gZ2VuZXJhdGluZyB0aGUgdGVtcGxhdGUuCiAgIyBGb3IgJ2hlbG0gdGVtcGxhdGUnIGFuZCBoZWxtIGluc3RhbGwgPiAyLjEwIGl0IHNob3VsZCBiZSB0cnVlLgogICMgRm9yIGhlbG0gPCAyLjksIGNyZHMgbXVzdCBiZSBpbnN0YWxsZWQgYWhlYWQgb2YgdGltZSB3aXRoCiAgIyAna3ViZWN0bCBhcHBseSAtZiBpbnN0YWxsL2t1YmVybmV0ZXMvaGVsbS9pc3Rpby90ZW1wbGF0ZXMvY3Jkcy55YW1sCiAgIyBhbmQgdGhpcyBvcHRpb25zIG11c3QgYmUgc2V0IG9mZi4KICBjcmRzOiBmYWxzZQoKICAjIE9taXQgdGhlIGlzdGlvLXNpZGVjYXItaW5qZWN0b3IgY29uZmlnbWFwIHdoZW4gZ2VuZXJhdGUgYQogICMgc3RhbmRhbG9uZSBnYXRld2F5LiBHYXRld2F5cyBtYXkgYmUgY3JlYXRlZCBpbiBuYW1lc3BhY2VzIG90aGVyCiAgIyB0aGFuIGBpc3Rpby1zeXN0ZW1gIGFuZCB3ZSBkb24ndCB3YW50IHRvIHJlLWNyZWF0ZSB0aGUgaW5qZWN0b3IKICAjIGNvbmZpZ21hcCBpbiB0aG9zZS4KICBvbWl0U2lkZWNhckluamVjdG9yQ29uZmlnTWFwOiB0cnVlCgogICMgSXN0aW8gY29udHJvbCBwbGFuZSBuYW1lc3BhY2U6IFRoaXMgc3BlY2lmaWVzIHdoZXJlIHRoZSBJc3RpbyBjb250cm9sCiAgIyBwbGFuZSB3YXMgaW5zdGFsbGVkIGVhcmxpZXIuICBNb2RpZnkgdGhpcyBpZiB5b3UgaW5zdGFsbGVkIHRoZSBjb250cm9sCiAgIyBwbGFuZSBpbiBhIGRpZmZlcmVudCBuYW1lc3BhY2UgdGhhbiBpc3Rpby1zeXN0ZW0uCiAgaXN0aW9OYW1lc3BhY2U6IGlzdGlvLXN5c3RlbQoKICBwcm94eToKICAgICMgU2V0cyB0aGUgZGVzdGluYXRpb24gU3RhdHNkIGluIGVudm95ICh0aGUgdmFsdWUgb2YgdGhlICItLXN0YXRzZFVkcEFkZHJlc3MiIHByb3h5IGFyZ3VtZW50CiAgICAjIHdvdWxkIGJlIDxob3N0Pjo8cG9ydD4pLgogICAgIyBEaXNhYmxlZCBieSBkZWZhdWx0LgogICAgIyBUaGUgaXN0aW8tc3RhdHNkLXByb20tYnJpZGdlIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBtb3ZpbmcgZm9yd2FyZC4KICAgIGVudm95U3RhdHNkOgogICAgICAjIElmIGVuYWJsZWQgaXMgc2V0IHRvIHRydWUsIGhvc3QgYW5kIHBvcnQgbXVzdCBhbHNvIGJlIHByb3ZpZGVkLiBJc3RpbyBubyBsb25nZXIgcHJvdmlkZXMgYSBzdGF0c2QgY29sbGVjdG9yLgogICAgICBlbmFibGVkOiBmYWxzZQogICAgICBob3N0OiAjIGV4YW1wbGU6IHN0YXRzZC1zdmMKICAgICAgcG9ydDogIyBleGFtcGxlOiA5MTI1CgoKIwojIEdhdGV3YXlzIENvbmZpZ3VyYXRpb24KIyBCeSBkZWZhdWx0IChpZiBlbmFibGVkKSBhIHBhaXIgb2YgSW5ncmVzcyBhbmQgRWdyZXNzIEdhdGV3YXlzIHdpbGwgYmUgY3JlYXRlZCBmb3IgdGhlIG1lc2guCiMgWW91IGNhbiBhZGQgbW9yZSBnYXRld2F5cyBpbiBhZGRpdGlvbiB0byB0aGUgZGVmYXVsdHMgYnV0IG1ha2Ugc3VyZSB0aG9zZSBhcmUgdW5pcXVlbHkgbmFtZWQKIyBhbmQgdGhhdCBOb2RlUG9ydHMgYXJlIG5vdCBjb25mbGljdGluZy4KIyBEaXNhYmxlIHNwZWNpZmMgZ2F0ZXdheSBieSBzZXR0aW5nIHRoZSBgZW5hYmxlZGAgdG8gZmFsc2UuCiMKZ2F0ZXdheXM6CiAgZW5hYmxlZDogdHJ1ZQoKICBjdXN0b20tZ2F0ZXdheToKICAgIGVuYWJsZWQ6IHRydWUKICAgIGxhYmVsczoKICAgICAgYXBwOiBjdXN0b20tZ2F0ZXdheQogICAgcmVwbGljYUNvdW50OiAxCiAgICBhdXRvc2NhbGVNaW46IDEKICAgIGF1dG9zY2FsZU1heDogNQogICAgcmVzb3VyY2VzOiB7fQogICAgICAjIGxpbWl0czoKICAgICAgIyAgY3B1OiAxMDBtCiAgICAgICMgIG1lbW9yeTogMTI4TWkKICAgICAgI3JlcXVlc3RzOgogICAgICAjICBjcHU6IDE4MDBtCiAgICAgICMgIG1lbW9yeTogMjU2TWkKCiAgICBsb2FkQmFsYW5jZXJJUDogIiIKICAgIHNlcnZpY2VBbm5vdGF0aW9uczoge30KICAgIHR5cGU6IExvYWRCYWxhbmNlciAjY2hhbmdlIHRvIE5vZGVQb3J0LCBDbHVzdGVySVAgb3IgTG9hZEJhbGFuY2VyIGlmIG5lZWQgYmUKCiAgICBwb3J0czoKICAgICAgIyMgWW91IGNhbiBhZGQgY3VzdG9tIGdhdGV3YXkgcG9ydHMKICAgIC0gcG9ydDogODAKICAgICAgdGFyZ2V0UG9ydDogODAKICAgICAgbmFtZTogaHR0cDIKICAgICAgIyBub2RlUG9ydDogMzEzODAKICAgIC0gcG9ydDogNDQzCiAgICAgIG5hbWU6IGh0dHBzCiAgICAgICMgbm9kZVBvcnQ6IDMxMzkwCiAgICAtIHBvcnQ6IDMxNDAwCiAgICAgIG5hbWU6IHRjcAogICAgICAjIG5vZGVQb3J0OiAzMTQwMAogICAgIyBQaWxvdCBhbmQgQ2l0YWRlbCBNVExTIHBvcnRzIGFyZSBlbmFibGVkIGluIGdhdGV3YXkgLSBidXQgd2lsbCBvbmx5IHJlZGlyZWN0CiAgICAjIHRvIHBpbG90L2NpdGFkZWwgaWYgZ2xvYmFsLm1lc2hFeHBhbnNpb24gc2V0dGluZ3MgYXJlIGVuYWJsZWQuCiAgICAtIHBvcnQ6IDE1MDExCiAgICAgIHRhcmdldFBvcnQ6IDE1MDExCiAgICAgIG5hbWU6IHRjcC1waWxvdC1ncnBjLXRscwogICAgLSBwb3J0OiA4MDYwCiAgICAgIHRhcmdldFBvcnQ6IDgwNjAKICAgICAgbmFtZTogdGNwLWNpdGFkZWwtZ3JwYy10bHMKICAgICMgQWRkb24gcG9ydHMgZm9yIGtpYWxpIGFyZSBlbmFibGVkIGluIGdhdGV3YXkgLSBidXQgd2lsbCBvbmx5IHJlZGlyZWN0IGlmCiAgICAjIHRoZSBnYXRld2F5IGNvbmZpZ3VyYXRpb24gZm9yIHRoZSB2YXJpb3VzIGNvbXBvbmVudHMgYXJlIGVuYWJsZWQuCiAgICAtIHBvcnQ6IDE1MDI5CiAgICAtIHRhcmdldFBvcnQ6IDE1MDI5CiAgICAjIFRlbGVtZXRyeS1yZWxhdGVkIHBvcnRzIGFyZSBlbmFibGVkIGluIGdhdGV3YXkgLSBidXQgd2lsbCBvbmx5IHJlZGlyZWN0IGlmCiAgICAjIHRoZSBnYXRld2F5IGNvbmZpZ3VyYXRpb24gZm9yIHRoZSB2YXJpb3VzIGNvbXBvbmVudHMgYXJlIGVuYWJsZWQuCiAgICAtIHBvcnQ6IDE1MDMwCiAgICAgIHRhcmdldFBvcnQ6IDE1MDMwCiAgICAgIG5hbWU6IGh0dHAyLXByb21ldGhldXMKICAgIC0gcG9ydDogMTUwMzEKICAgICAgdGFyZ2V0UG9ydDogMTUwMzEKICAgICAgbmFtZTogaHR0cDItZ3JhZmFuYQogICAgLSBwb3J0OiAxNTAzMgogICAgICB0YXJnZXRQb3J0OiAxNTAzMgogICAgICBuYW1lOiBodHRwMi10cmFjaW5nCiAgICBzZWNyZXRWb2x1bWVzOgogICAgLSBuYW1lOiBjdXN0b21nYXRld2F5LWNlcnRzCiAgICAgIHNlY3JldE5hbWU6IGlzdGlvLWN1c3RvbWdhdGV3YXktY2VydHMKICAgICAgbW91bnRQYXRoOiAvZXRjL2lzdGlvL2N1c3RvbWdhdGV3YXktY2VydHMKICAgIC0gbmFtZTogY3VzdG9tZ2F0ZXdheS1jYS1jZXJ0cwogICAgICBzZWNyZXROYW1lOiBpc3Rpby1jdXN0b21nYXRld2F5LWNhLWNlcnRzCiAgICAgIG1vdW50UGF0aDogL2V0Yy9pc3Rpby9jdXN0b21nYXRld2F5LWNhLWNlcnRzCgojIGFsbCBvdGhlciBjb21wb25lbnRzIGFyZSBkaXNhYmxlZCBleGNlcHQgdGhlIGdhdGV3YXlzCmluZ3Jlc3M6CiAgZW5hYmxlZDogZmFsc2UKCnNlY3VyaXR5OgogIGVuYWJsZWQ6IGZhbHNlCgpzaWRlY2FySW5qZWN0b3JXZWJob29rOgogIGVuYWJsZWQ6IGZhbHNlCgpnYWxsZXk6CiAgZW5hYmxlZDogZmFsc2UKCm1peGVyOgogIGVuYWJsZWQ6IGZhbHNlCgpwaWxvdDoKICBlbmFibGVkOiBmYWxzZQoKZ3JhZmFuYToKICBlbmFibGVkOiBmYWxzZQoKcHJvbWV0aGV1czoKICBlbmFibGVkOiBmYWxzZQoKc2VydmljZWdyYXBoOgogIGVuYWJsZWQ6IGZhbHNlCgp0cmFjaW5nOgogIGVuYWJsZWQ6IGZhbHNlCgpraWFsaToKICBlbmFibGVkOiBmYWxzZQoKY2VydG1hbmFnZXI6CiAgZW5hYmxlZDogZmFsc2UK"
        },
        {
          "filePath": "values-istio-mcp.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbApnbG9iYWw6CiAgIyBjb250cm9sUGxhbmVNdGxzIGVuYWJsZWQuIFdpbGwgcmVzdWx0IGluIGRlbGF5cyBzdGFydGluZyB0aGUgcG9kcyB3aGlsZSBzZWNyZXRzIGFyZQogICMgcHJvcGFnYXRlZCwgbm90IHJlY29tbWVuZGVkIGZvciB0ZXN0cy4KICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IGZhbHNlCgogIG10bHM6CiAgICAjIERlZmF1bHQgc2V0dGluZyBmb3Igc2VydmljZS10by1zZXJ2aWNlIG10bHMuIENhbiBiZSBzZXQgZXhwbGljaXRseSB1c2luZwogICAgIyBkZXN0aW5hdGlvbiBydWxlcyBvciBzZXJ2aWNlIGFubm90YXRpb25zLgogICAgZW5hYmxlZDogZmFsc2UKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2YXRlIGRvY2tlciByZWdpc3RyeS4KICAjIGltYWdlUHVsbFNlY3JldHM6CiAgIyAgIC0gbmFtZTogInByaXZhdGUtcmVnaXN0cnkta2V5IgoKICAjIERlZmF1bHQgaXMgMTBzIHNlY29uZAogIHJlZnJlc2hJbnRlcnZhbDogMXMKCiAgdXNlTUNQOiB0cnVlCgppc3Rpb3Rlc3Rpbmc6CiAgb25lTmFtZVNwYWNlOiBmYWxzZQoKcHJvbWV0aGV1czoKICBlbmFibGVkOiB0cnVlCgpnYWxsZXk6CiAgZW5hYmxlZDogdHJ1ZQo="
        },
        {
          "filePath": "values-istio-multicluster.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tbXVsdGljbHVzdGVyLnlhbWwsIHVzZWQgZm9yIENJL0NELgpnbG9iYWw6CiAgIyBjb250cm9sUGxhbmVNdGxzIGVuYWJsZWQuIFdpbGwgcmVzdWx0IGluIGRlbGF5cyBzdGFydGluZyB0aGUgcG9kcyB3aGlsZSBzZWNyZXRzIGFyZQogICMgcHJvcGFnYXRlZCwgbm90IHJlY29tbWVuZGVkIGZvciB0ZXN0cy4KICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IGZhbHNlCgogIG10bHM6CiAgICAjIERlZmF1bHQgc2V0dGluZyBmb3Igc2VydmljZS10by1zZXJ2aWNlIG10bHMuIENhbiBiZSBzZXQgZXhwbGljaXRseSB1c2luZwogICAgIyBkZXN0aW5hdGlvbiBydWxlcyBvciBzZXJ2aWNlIGFubm90YXRpb25zLgogICAgZW5hYmxlZDogZmFsc2UKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2YXRlIGRvY2tlciByZWdpc3RyeS4KICAjIGltYWdlUHVsbFNlY3JldHM6CiAgIyAgIC0gbmFtZTogInByaXZhdGUtcmVnaXN0cnkta2V5IgoKICAjIERlZmF1bHQgaXMgMTBzIHNlY29uZAogIHJlZnJlc2hJbnRlcnZhbDogMXMKCnByb21ldGhldXM6CiAgZW5hYmxlZDogdHJ1ZQoKIyBJbiBhIG11bHRpcGxlIGNsdXN0ZXIgZW52aXJvbm1lbnQsIGNpdGFkZWwgdXNlcyB0aGUgc2FtZSByb290IGNlcnRpZmljYXRlIGluIGFsbCB0aGUgY2x1c3RlcnMKc2VjdXJpdHk6CiAgc2VsZlNpZ25lZDogZmFsc2UK"
        },
        {
          "filePath": "values-istio-one-namespace-auth.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCB1c2VkIGZvciBkZXByZWNhdGVkIENJL0NEIHRlc3RpbmcuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZU10bHMgZW5hYmxlZC4gV2lsbCByZXN1bHQgaW4gZGVsYXlzIHN0YXJ0aW5nIHRoZSBwb2RzIHdoaWxlIHNlY3JldHMgYXJlCiAgIyBwcm9wYWdhdGVkLCBub3QgcmVjb21tZW5kZWQgZm9yIHRlc3RzLgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogdHJ1ZQoKICBtdGxzOgogICAgIyBEZWZhdWx0IHNldHRpbmcgZm9yIHNlcnZpY2UtdG8tc2VydmljZSBtdGxzLiBDYW4gYmUgc2V0IGV4cGxpY2l0bHkgdXNpbmcKICAgICMgZGVzdGluYXRpb24gcnVsZXMgb3Igc2VydmljZSBhbm5vdGF0aW9ucy4KICAgIGVuYWJsZWQ6IHRydWUKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0c2VyIGNvbmZpZ3VyZWQgd2l0aCBwcml2YXRlIGRvY2tlciByZWdpc3RyeS4KICAjIGltYWdlUHVsbFNlY3JldHM6CiAgIyAgIC0gbmFtZTogInByaXZhdGUtcmVnaXN0cnkta2V5IgoKICAjIERlZmF1bHQgaXMgMTBzIHNlY29uZAogIHJlZnJlc2hJbnRlcnZhbDogMXMKCmlzdGlvdGVzdGluZzoKICBvbmVOYW1lU3BhY2U6IHRydWUK"
        },
        {
          "filePath": "values-istio-one-namespace.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCB1c2VkIGZvciBkZXByZWNhdGVkIENJL0NEIHRlc3RpbmcuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZU10bHMgZW5hYmxlZC4gV2lsbCByZXN1bHQgaW4gZGVsYXlzIHN0YXJ0aW5nIHRoZSBwb2RzIHdoaWxlIHNlY3JldHMgYXJlCiAgIyBwcm9wYWdhdGVkLCBub3QgcmVjb21tZW5kZWQgZm9yIHRlc3RzLgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogZmFsc2UKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiBmYWxzZQoKICAjIyBpbWFnZVB1bGxTZWNyZXRzIGZvciBhbGwgU2VydmljZUFjY291bnQuIE11c3QgYmUgc2V0IGZvciBhbnkgY2x1c3RzZXIgY29uZmlndXJlZCB3aXRoIHByaXZhdGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgogICMgRGVmYXVsdCBpcyAxMHMgc2Vjb25kCiAgcmVmcmVzaEludGVydmFsOiAxcwoKaXN0aW90ZXN0aW5nOgogIG9uZU5hbWVTcGFjZTogdHJ1ZQo="
        },
        {
          "filePath": "values-istio.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCBmb3IgYXV0b21hdGVkIENJL0NEIHRlc3QsIHVzaW5nIHYxL2FscGhhMQojIG9yIHYyL2FscGhhMyB3aXRoICdncmFkdWFsIG1pZ3JhdGlvbicgKHVzaW5nIGVudiB2YXJpYWJsZSBhdCBpbmplY3QgdGltZSkuCmdsb2JhbDoKICAjIyBpbWFnZVB1bGxTZWNyZXRzIGZvciBhbGwgU2VydmljZUFjY291bnQuIE11c3QgYmUgc2V0IGZvciBhbnkgY2x1c3RzZXIgY29uZmlndXJlZCB3aXRoIHByaXZhdGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgogICMgRGVmYXVsdCBpcyAxMHMgc2Vjb25kCiAgcmVmcmVzaEludGVydmFsOiAxcwo="
        },
        {
          "filePath": "values.yaml",
          "fileContents": ""
        }
      ]
    },
    "contentSHA": "0a839a8a5ab266c94322bb414aabd0480b84ebb3136ff491394a2b335a716a50"
  }
}